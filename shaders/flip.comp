/*
 *  Cascade Image Editor
 *
 *  Copyright (C) 2022 Till Dechent and contributors
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#version 430

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputImage;
layout (binding = 1, rgba32f) uniform readonly image2D mask;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(set = 0, binding = 3) uniform InputBuffer
{
    layout(offset = 0) float flip;
    layout(offset = 4) float flop;
} sb;

void main()
{   
	

    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 targetCoords = pixelCoords;

    vec4 pixelBack = imageLoad(inputImage, pixelCoords).rgba;  
	vec4 pixelOut = pixelBack;
	
	ivec2 imageSize = imageSize(inputImage);

    if (sb.flip == 1.0 && sb.flop != 1.0)
	{
		targetCoords = ivec2(pixelCoords.x, abs(pixelCoords.y - imageSize.y));	
	}
	else if (sb.flop == 1.0 && sb.flip != 1.0)
	{
		targetCoords = ivec2(abs(pixelCoords.x - imageSize.x), pixelCoords.y);
	}
	else if (sb.flip == 1.0 && sb.flop == 1.0)
	{
		targetCoords = ivec2(abs(pixelCoords.x - imageSize.x), abs(pixelCoords.y - imageSize.y));
	}
	
	pixelOut = imageLoad(inputImage, targetCoords);

    imageStore(resultImage, pixelCoords, pixelOut);
}
