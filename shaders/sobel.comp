/*
 *  Cascade Image Editor
 *
 *  Copyright (C) 2022 Till Dechent and contributors
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#version 430

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputImage;
layout (binding = 1, rgba32f) uniform readonly image2D mask;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(set = 0, binding = 3) uniform InputBuffer
{
    layout(offset = 0) float intensityX;
	layout(offset = 4) float intensityY;
	layout(offset = 8) float gain;
} sb;

vec3 conv(in float[9] kernel, in vec3[9] data) 
{
   vec3 res = {0.0, 0.0, 0.0};
   for (int i=0; i<9; ++i) 
   {
      res += kernel[i] * data[i];
   }
   return res;
}

struct ImageData 
{
	 vec3 rgb[9];
} imageData;    

void main()
{   
    // Fetch neighbouring texels
    int n = -1;
    for (int i=-1; i<2; ++i) 
    {   
        for(int j=-1; j<2; ++j) 
        {    
            n++;    
            vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;
            imageData.rgb[n] = rgb;
        }
    }

    float[9] xKernel;
    xKernel[0] = 1.0 * sb.intensityX; xKernel[1] =  0.0; xKernel[2] = -1.0 * sb.intensityX;
    xKernel[3] = 2.0 * sb.intensityX; xKernel[4] = 0.0; xKernel[5] = -2.0 * sb.intensityX;
    xKernel[6] = 1.0 * sb.intensityX; xKernel[7] =  0.0; xKernel[8] = -1.0 * sb.intensityX;

    float[9] yKernel;
    yKernel[0] = -1.0 * sb.intensityY; yKernel[1] =  -2.0 * sb.intensityY; yKernel[2] =  -1.0 * sb.intensityY;
    yKernel[3] = 0.0; yKernel[4] = 0.0; yKernel[5] = 0.0;
    yKernel[6] = 1.0 * sb.intensityY; yKernel[7] =  2.0 * sb.intensityY; yKernel[8] = 1.0 * sb.intensityY;
                                    
    vec3 resX = vec3(conv(xKernel, imageData.rgb));

    vec3 resY = vec3(conv(yKernel, imageData.rgb));

    vec3 mag = sqrt((resX * resX) + (resY * resY));

    float gray = (0.2126 * mag.r + 0.7152 * mag.g + 0.0722 * mag.b) / 3.0;

    if (sb.gain == 0.0)
    {
        gray = 0.0;
    }
    else
    {
        gray *= sb.gain;
    }

    vec4 final = vec4(gray, gray, gray, gray);

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), final);
}