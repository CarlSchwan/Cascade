// Original shader created for the GIPS project by Martin Fiedler
// https://github.com/kajott/GIPS

#version 430

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputBack;
layout (binding = 1, rgba32f) uniform readonly image2D inputFront;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(set = 0, binding = 3) uniform InputBuffer
{
    layout(offset = 0) float keyR;
    layout(offset = 4) float keyG;
    layout(offset = 8) float keyB;
    layout(offset = 16) float tolerance;
	layout(offset = 20) float smoothness;
	layout(offset = 24) float hueOnly;
	layout(offset = 28) float invert;
	layout(offset = 32) float desaturate;
} sb;

void main()
{   
    ivec2 imageSize = imageSize(inputBack);

    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    vec4 pixel = imageLoad(inputBack, pixelCoords).rgba;  

	vec3 key = vec3(sb.keyR, sb.keyG, sb.keyB);

	float res;
    if (sb.hueOnly < 0.5) 
	{
        res = length(key - pixel.rgb);
    } else 
	{
        res = dot(normalize(key), normalize(pixel.rgb));
        res = 1.0 - res * res * res;
    }
    res = 1.0 - smoothstep(sb.tolerance - sb.smoothness, sb.tolerance + sb.smoothness, res);
    res = abs(sb.invert - res);

    vec4 outColor = pixel;
    if (sb.desaturate > 0.5) 
	{
        outColor.rgb = mix(vec3(dot(outColor.rgb, vec3(.299,.587,.114))), outColor.rgb, res);
	}
    outColor.a = res;

	imageStore(resultImage, pixelCoords, outColor);
    
}