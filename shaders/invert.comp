/*
 *  Cascade Image Editor
 *
 *  Copyright (C) 2022 Till Dechent and contributors
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#version 430

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputImage;
layout (binding = 1, rgba32f) uniform readonly image2D mask;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(set = 0, binding = 3) uniform InputBuffer
{
    layout(offset = 0) float bRed;
    layout(offset = 4) float bGreen;
    layout(offset = 8) float bBlue;
    layout(offset = 12) float bAlpha;
	layout(offset = 16) float useMask;
} sb;

void main()
{   
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    vec4 rgba = imageLoad(inputImage, pixelCoords).rgba; 
	float mask = imageLoad(inputImage, pixelCoords).a;
	vec4 original = rgba;

    if (sb.bRed > 0.0)
    {
        rgba.r = 1.0 - rgba.r;
    }
    if (sb.bGreen > 0.0)
    {
        rgba.g = 1.0 - rgba.g;
    }
    if (sb.bBlue > 0.0)
    {
        rgba.b = 1.0 - rgba.b;
    }
    if (sb.bAlpha > 0.0)
    {
        rgba.a = 1.0 - rgba.a;
    }
	
	if (sb.useMask > 0.5)
	{
		rgba = mix(original, rgba, mask);
	}

    imageStore(resultImage, pixelCoords, rgba);
}
