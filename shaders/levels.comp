// Original shader created for the GIPS project by Martin Fiedler
// https://github.com/kajott/GIPS

#version 430

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputBack;
layout (binding = 1, rgba32f) uniform readonly image2D inputFront;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(set = 0, binding = 3) uniform InputBuffer
{
    layout(offset = 0) float inBlack;
    layout(offset = 4) float inWhite;
    layout(offset = 8) float gamma;
    layout(offset = 12) float outBlack;
	layout(offset = 16) float outWhite;
	layout(offset = 20) float lumaOnly;
	layout(offset = 24) float useMask;
} sb;

void main()
{   
    ivec2 imageSize = imageSize(inputBack);

    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    vec4 pixel = imageLoad(inputBack, pixelCoords).rgba;  
	float mask = pixel.a;
	vec4 original = pixel;
	
	if (sb.lumaOnly < 0.5)
	{
        pixel.rgb = (pixel.rgb - sb.inBlack) / (sb.inWhite - sb.inBlack);
        pixel.rgb = pow(clamp(pixel.rgb, 0.0, 1.0), vec3(1.0 / sb.gamma));
        pixel.rgb = pixel.rgb * (sb.outWhite - sb.outBlack) + sb.outBlack;
    } 
	else 
	{
        // luma mode
        float luma = dot(pixel.rgb, vec3(.25, .5, .25));
        vec3 chroma = pixel.rgb - vec3(luma);
        luma = (luma - sb.inBlack) / (sb.inWhite - sb.inBlack);
        luma = pow(clamp(luma, 0.0, 1.0), 1.0 / sb.gamma);
        luma = luma * (sb.outWhite - sb.outBlack) + sb.outBlack;
        pixel.rgb = luma + chroma;
    }
	
	if (sb.useMask > 0.5)
	{
		pixel = mix(original, pixel, mask);
	}

	imageStore(resultImage, pixelCoords, pixel);
}