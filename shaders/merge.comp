/*
 *  Cascade Image Editor
 *
 *  Copyright (C) 2022 Till Dechent and contributors
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#version 430

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputImageBack;
layout (binding = 1, rgba32f) uniform readonly image2D inputImageFront;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(set = 0, binding = 3) uniform InputBuffer
{
    layout(offset = 0) float mode;
    layout(offset = 4) float xoffset;
    layout(offset = 8) float yoffset;
    layout(offset = 12) float opacity;
} sb;

void main()
{   
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   

    ivec2 targetCoords = ivec2(pixelCoords.x - sb.xoffset, pixelCoords.y - sb.yoffset); 

    vec4 back = imageLoad(inputImageBack, pixelCoords).rgba;

    vec4 front = imageLoad(inputImageFront, targetCoords).rgba;
	
	vec4 result = back;

    if(sb.mode == 0.0) // Over
    {
        result = front + back * (1.0 - front.a);
		result = mix(back,  result, sb.opacity);
    }
    else if (sb.mode == 1.0) // Add
    {
        result = back + (front * sb.opacity);
    }
    else if (sb.mode == 2.0) // Divide
    {
		result = mix(back, front / back, sb.opacity);
    }
    else if (sb.mode == 3.0) // Minus
    {
        result = mix(back, front - back, sb.opacity);
    }
    else if (sb.mode == 4.0) // Multiply
    {
        if (sb.opacity != 0.0)
        {
            result = ((1.0 - sb.opacity) * back) + (back * front * sb.opacity);
        }
    }
	imageStore(resultImage, pixelCoords, result);                                
} 
