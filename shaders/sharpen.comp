/*
 *  Cascade Image Editor
 *
 *  Copyright (C) 2022 Till Dechent and contributors
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#version 430

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputImage;
layout (binding = 1, rgba32f) uniform readonly image2D mask;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(set = 0, binding = 3) uniform InputBuffer
{
    layout(offset = 0) float bRed;
    layout(offset = 4) float bGreen;
    layout(offset = 8) float bBlue;
    layout(offset = 12) float bAlpha;
    layout(offset = 16) float amount;
} sb;

vec4 conv(in float[9] kernel, in vec4[9] data)
{
   vec4 res = vec4(0.0);
   for (int i=0; i<9; ++i) 
   {
      res += kernel[i] * data[i];
   }
   return res;
}

struct ImageData 
{
    vec4 rgba[9];
} imageData;    

void main()
{   
    // Fetch neighbouring texels
    int n = -1;
    for (int i=-1; i<2; ++i) 
    {   
        for(int j=-1; j<2; ++j) 
        {    
            n++;    
            vec4 rgba = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgba;
            imageData.rgba[n] = rgba;
        }
    }

    vec4 original = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgba;

    float[9] kernel;
    kernel[0] = -1.0; kernel[1] =  -1.0; kernel[2] =  -1.0;
    kernel[3] = -1.0; kernel[4] = 8.0; kernel[5] =  -1.0;
    kernel[6] = -1.0; kernel[7] =  -1.0; kernel[8] = -1.0;

    vec4 res;        
  
    if(sb.amount == 0.0)
    {
        res = original;
    }      
    else
    {
        res = vec4(conv(kernel, imageData.rgba) / (100 / sb.amount) + original);

        if (sb.bRed == 0.0)
        {
            res.r = original.r;
        }
        if (sb.bGreen == 0.0)
        {
            res.g = original.g;
        }
        if (sb.bBlue == 0.0)
        {
            res.b = original.b;
        }
        if (sb.bAlpha == 0.0)
        {
            res.a = original.a;
        }
    }

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}
