/*
 *  Cascade Image Editor
 *
 *  Copyright (C) 2022 Till Dechent and contributors
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#version 430

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputImage;
layout (binding = 1, rgba32f) uniform readonly image2D mask;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(set = 0, binding = 3) uniform InputBuffer
{
    layout(offset = 0) float leftCrop;
    layout(offset = 4) float topCrop;
    layout(offset = 8) float rightCrop;
    layout(offset = 12) float bottomCrop;
} sb;

void main()
{   
    ivec2 imgSize = imageSize(inputImage);

    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    vec4 rgba = imageLoad(inputImage, pixelCoords + ivec2(sb.leftCrop, sb.topCrop)).rgba;           

    if(gl_GlobalInvocationID.x <= imgSize.x - sb.leftCrop - sb.rightCrop &&
    gl_GlobalInvocationID.y <= imgSize.y - sb.topCrop - sb.bottomCrop)
    {
        imageStore(resultImage, pixelCoords, rgba);
    }
}